import java.util.*;

class Node{
    private int x; 
    private int y;

    Node(int x, int y){
        this.x = x;
        this.y = y;
    }
    int getX(){
        return this.x;
    }
    int getY(){
        return this.y;
    }
}

public class Main{
    public static int n, m;
    public static int[][] graph = new int[201][201];
    public static int[] dx = {0, 0, -1, 1}; //상 하 좌 우
    public static int[] dy = {-1, 1, 0, 0};


    public static int bfs(int x, int y){
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(x, y));

        while(!q.isEmpty()){
            Node node = q.poll();
            x = node.getX();
            y = node.getY();
            for(int i = 0 ; i < 4 ; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                //범위 관련 예외처리
                if(nx < 0 || ny < 0|| nx >= m || ny >= n) continue;
                //괴물이 있는 부분
                if(graph[ny][nx] == 0) continue;
                //괴물이 없는부분 중 처음 방문 할 때
                if(graph[ny][nx] == 1){
                    //해당 칸이 방문 가능한 최소 이동 칸 수 
                    graph[ny][nx] = graph[y][x] + 1;
                    //그런 뒤 해당 칸은 큐에 추가 후 poll하면서 empty까지 반복
                    q.offer(new Node(nx, ny));
                }
            }
        }
        //탈출경로의 최소 이동 칸 수가 저장 반환
        return graph[n-1][m-1];
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt(); // y
        m = sc.nextInt(); // x
        sc.nextLine();
        
        for(int i = 0 ; i < n ; i++){
            String str = sc.nextLine();
            for(int j = 0 ; j < m ; j++){
                graph[i][j] = str.charAt(j) - '0';
            }
        }
        System.out.println(bfs(0,0));
        sc.close();
    }
}
